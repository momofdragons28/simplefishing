// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
const startButton = document.getElementById('start-button');
const catchButton = document.getElementById('catch-button');
const messageContainer = document.getElementById('result-message');
const indicator = document.querySelector('.indicator');
const targetZone = document.getElementById('target-zone');
const coinsDisplay = document.getElementById('coins');
const energyValue = document.getElementById('energy-value');
const energyBarFill = document.getElementById('energy-bar-fill');
const sidebar = document.getElementById('sidebar');
const panelBtns = document.querySelectorAll('.panel-btn');
const sidebarTitle = document.querySelector('.sidebar-title');
const tabPanes = document.querySelectorAll('.tab-pane');

// –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let isCatching = false;
let targetZoneStart = 0;
let targetZoneEnd = 0;
let coins = 0;
let maxEnergy = 100;
let currentEnergy = 5;
let currentFish = null;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä—ã–±
const fishSettings = {
  green: { color: '#76c7c0', zoneSize: 50 },
  blue: { color: '#0000ff', zoneSize: 40 },
  orange: { color: '#ffa500', zoneSize: 30 },
  red: { color: '#ff0000', zoneSize: 20 }
};

// –î–∞–Ω–Ω—ã–µ –æ —Ä—ã–±–∞—Ö
const fishData = {
  green: [
    { name: "–û–∫—É–Ω—å", image: "img/green_fish1.png" },
    { name: "–ö–∞—Ä–ø", image: "img/green_fish2.png" },
    { name: "–ü–ª–æ—Ç–≤–∞", image: "img/green_fish3.png" },
    { name: "–ö–∞—Ä–∞—Å—å", image: "img/green_fish4.png" },
    { name: "–í—å—é–Ω", image: "img/green_fish5.png" }
  ],
  blue: [
    { name: "–°–æ–º", image: "img/blue_fish1.png" },
    { name: "–°—É–¥–∞–∫", image: "img/blue_fish2.png" },
    { name: "–©—É–∫–∞", image: "img/blue_fish3.png" }
  ],
  orange: [
    { name: "–§–æ—Ä–µ–ª—å", image: "img/orange_fish1.png" },
    { name: "–°—Ç–µ—Ä–ª—è–¥—å", image: "img/orange_fish2.png" }
  ],
  red: [
    { name: "–ö—Ä–∞–±", image: "img/red_fish1.png" }
  ]
};

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
let gameStats = {
  fishes: {},
  rarities: {
    green: 0,
    blue: 0,
    orange: 0,
    red: 0
  }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞
const shopSettings = {
  maxEnergy: {
    baseCost: 1000,
    costMultiplier: 2,
    maxIncreases: 10
  },
  chances: {
    blue: { max: 25, cost: 5000 },
    orange: { max: 10, cost: 50000 },
    red: { max: 5, cost: 500000 }
  }
};

let energyUpgrades = 0;
let chanceUpgrades = {
  blue: 0,
  orange: 0,
  red: 0
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function initStats() {
  for(const rarity in fishData) {
    for(const fish of fishData[rarity]) {
      gameStats.fishes[fish.name] = 0;
    }
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats(fish) {
  gameStats.fishes[fish.name]++;
  gameStats.rarities[fish.quality]++;
  renderStats();
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function renderStats() {
  const statsContainer = document.querySelector('#stats');
  statsContainer.innerHTML = `
    <div class="stats-container">
      <div class="fish-stats"></div>
      <div class="stats-divider"></div>
      <div class="rarity-stats"></div>
    </div>
  `;

  // –†—ã–±—ã
  const fishStats = statsContainer.querySelector('.fish-stats');
  for(const fishName in gameStats.fishes) {
    const rarity = Object.keys(fishData).find(r => 
      fishData[r].some(f => f.name === fishName)
    );
    const fish = fishData[rarity].find(f => f.name === fishName);
    
    fishStats.innerHTML += `
      <div class="fish-item">
        <img src="${fish.image}" class="fish-icon">
        <span class="fish-name">${fishName}</span>
        <span class="fish-count ${rarity}">${gameStats.fishes[fishName]}</span>
      </div>
    `;
  }

  // –†–µ–¥–∫–æ—Å—Ç–∏
  const rarityStats = statsContainer.querySelector('.rarity-stats');
  for(const rarity in gameStats.rarities) {
    const name = {
      green: "–ó–µ–ª—ë–Ω–∞—è —Ä—ã–±–∞",
      blue: "–°–∏–Ω—è—è —Ä—ã–±–∞",
      orange: "–û—Ä–∞–Ω–∂–µ–≤–∞—è —Ä—ã–±–∞",
      red: "–ö—Ä–∞—Å–Ω–∞—è —Ä—ã–±–∞"
    }[rarity];

    rarityStats.innerHTML += `
      <div class="rarity-item">
        <span class="rarity-name ${rarity}">${name}</span>
        <span class="rarity-count">${gameStats.rarities[rarity]}</span>
      </div>
    `;
  }
}

// –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π —Ä—ã–±—ã
function getRandomFish() {
  const baseChances = {
    green: 60 - (chanceUpgrades.blue + chanceUpgrades.orange + chanceUpgrades.red),
    blue: 25 + chanceUpgrades.blue,
    orange: 10 + chanceUpgrades.orange,
    red: 5 + chanceUpgrades.red
  };

  const rand = Math.random() * 100;
  if(rand < baseChances.green) return getRandomFishByQuality('green');
  if(rand < baseChances.green + baseChances.blue) return getRandomFishByQuality('blue');
  if(rand < baseChances.green + baseChances.blue + baseChances.orange) return getRandomFishByQuality('orange');
  return getRandomFishByQuality('red');
}

function getRandomFishByQuality(quality) {
  const fishArray = fishData[quality];
  const fish = {...fishArray[Math.floor(Math.random() * fishArray.length)]};
  fish.quality = quality;
  return fish;
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
function startGame() {
  if(currentEnergy <= 0) {
    showEnergyMessage();
    return;
  }

  currentFish = getRandomFish();
  const settings = fishSettings[currentFish.quality];
  
  indicator.style.backgroundColor = settings.color;
  generateTargetZone(settings.zoneSize);

  startButton.style.display = 'none';
  catchButton.style.display = 'block';
  indicator.style.animationPlayState = 'running';
  
  currentEnergy--;
  updateEnergy();
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
function endGame(isSuccess) {
  indicator.style.animationPlayState = 'paused';
  clearMessageContainer();

  if(isSuccess) {
    const reward = {
      green: 10,
      blue: 30,
      orange: 100,
      red: 500
    }[currentFish.quality];

    messageContainer.innerHTML = `
      <p>–£—Ä–∞! –†—ã–±–∞ –ø–æ–π–º–∞–Ω–∞</p>
      <p style="color: ${fishSettings[currentFish.quality].color}">${currentFish.name}</p>
      <img src="${currentFish.image}" class="fish-image">
      <p>–ù–∞–≥—Ä–∞–¥–∞: ${reward} –º–æ–Ω–µ—Ç</p>
    `;

    coins += reward;
    coinsDisplay.textContent = coins;
    updateStats(currentFish);
  } else {
    messageContainer.innerHTML = `
      <p>–£–ø—Å... –†—ã–±–∞ —Å–æ—Ä–≤–∞–ª–∞—Å—å!</p>
      <img src="img/sad_face.png" class="fish-image">
    `;
  }

  catchButton.style.display = 'none';
  startButton.style.display = 'block';
  isCatching = false;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function generateTargetZone(size) {
  const progressBarWidth = 300;
  targetZoneStart = Math.random() * (progressBarWidth - size);
  targetZoneEnd = targetZoneStart + size;

  targetZone.style.left = `${targetZoneStart}px`;
  targetZone.style.width = `${size}px`;
}

function updateEnergy() {
  energyValue.textContent = currentEnergy;
  energyBarFill.style.width = `${(currentEnergy / maxEnergy) * 100}%`;
}

function showEnergyMessage() {
  messageContainer.innerHTML = `
    <p>–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏!</p>
    ${coins >= 100 ? 
      `<button id="add-energy-button">–î–æ–±–∞–≤–∏—Ç—å —ç–Ω–µ—Ä–≥–∏–∏ (100 –º–æ–Ω–µ—Ç)</button>` : 
      `<p style="color: red;">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏</p>`
    }
  `;
  
  const addEnergyButton = document.getElementById('add-energy-button');
  if (addEnergyButton) {
    addEnergyButton.addEventListener('click', () => {
      if (coins >= 100) {
        coins -= 100;
        currentEnergy = maxEnergy;
        coinsDisplay.textContent = coins;
        updateEnergy();
        clearMessageContainer();
      }
    });
  }
}

function clearMessageContainer() {
  messageContainer.innerHTML = '';
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
startButton.addEventListener('click', startGame);

catchButton.addEventListener('click', () => {
  if(isCatching) return;
  isCatching = true;

  const indicatorRect = indicator.getBoundingClientRect();
  const progressBarRect = indicator.parentElement.getBoundingClientRect();
  const indicatorPosition = indicatorRect.left - progressBarRect.left;
  const indicatorWidth = indicatorRect.width;

  const isSuccess = (
    indicatorPosition + indicatorWidth >= targetZoneStart &&
    indicatorPosition <= targetZoneEnd
  );

  endGame(isSuccess);
});

function switchTab(tabId) {
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
  tabPanes.forEach(pane => {
    pane.classList.remove('active');
    pane.style.display = 'none';
  });

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
  const activePane = document.getElementById(tabId);
  if (activePane) {
    activePane.classList.add('active');
    activePane.style.display = 'block';
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
  const targetButton = document.querySelector(`[data-target="${tabId}"]`);
  if (targetButton) {
    sidebarTitle.textContent = targetButton.textContent;
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
  if (tabId === 'stats') {
    renderStats();
  } else if (tabId === 'shop') {
    renderShop();
  } else if (tabId === 'info') {
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π HTML –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  } else {
    activePane.innerHTML = `<p class="empty-tab">–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†Ô∏è</p>`;
  }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª—å—é
panelBtns.forEach(btn => {
  btn.addEventListener('click', () => {
    const target = btn.dataset.target;
    sidebar.classList.add('active');
    panelBtns.forEach(b => b.classList.remove('active'));
    btn.classList.add('active');
    switchTab(target);
  });
});

document.getElementById('closeBtn').addEventListener('click', () => {
  sidebar.classList.remove('active');
  panelBtns.forEach(b => b.classList.remove('active'));
});

document.addEventListener('click', (e) => {
  if(!sidebar.contains(e.target) && !e.target.closest('.panel-buttons')) {
    sidebar.classList.remove('active');
    panelBtns.forEach(b => b.classList.remove('active'));
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
function renderShop() {
  const shopContainer = document.querySelector('#shop');
  const energyCost = shopSettings.maxEnergy.baseCost * Math.pow(shopSettings.maxEnergy.costMultiplier, energyUpgrades);
  const greenChance = 60 - (chanceUpgrades.blue + chanceUpgrades.orange + chanceUpgrades.red);

  shopContainer.innerHTML = `
    <div class="shop-grid">
      <!-- –≠–Ω–µ—Ä–≥–∏—è -->
      <div class="shop-item">
        <img src="img/energy.png" class="shop-icon" alt="–≠–Ω–µ—Ä–≥–∏—è">
        <span class="shop-name">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è</span>
        <span class="shop-value">${maxEnergy}</span>
        ${energyUpgrades < shopSettings.maxEnergy.maxIncreases ? 
          `<span class="shop-button" title="–°—Ç–æ–∏–º–æ—Å—Ç—å: ${energyCost} –º–æ–Ω–µ—Ç">üõí</span>` : ''}
      </div>

      <!-- –ó–µ–ª–µ–Ω–∞—è —Ä—ã–±–∞ -->
      <div class="shop-item">
        <img src="img/green.png" class="shop-icon" alt="–ó–µ–ª–µ–Ω–∞—è —Ä—ã–±–∞">
        <span class="shop-name">–ó–µ–ª–µ–Ω–∞—è —Ä—ã–±–∞</span>
        <span class="shop-value">${greenChance}%</span>
      </div>

      <!-- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä—ã–±—ã -->
      ${['blue', 'orange', 'red'].map(quality => {
        const cost = shopSettings.chances[quality].cost;
        return `
          <div class="shop-item">
            <img src="img/${quality}.png" class="shop-icon" alt="${qualityToName(quality)}">
            <span class="shop-name">${qualityToName(quality)}</span>
            <span class="shop-value">${getBaseChance(quality) + chanceUpgrades[quality]}%</span>
            ${chanceUpgrades[quality] < shopSettings.chances[quality].max ? 
              `<span class="shop-button" title="–°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost} –º–æ–Ω–µ—Ç">üõí</span>` : ''}
          </div>
        `;
      }).join('')}
    </div>
  `;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
  document.querySelectorAll('.shop-button').forEach(button => {
    button.addEventListener('click', (e) => {
      const parent = e.target.closest('.shop-item');
      const type = parent.querySelector('.shop-name').textContent;
      
      if(type.includes('—ç–Ω–µ—Ä–≥–∏—è')) {
        showEnergyUpgradeModal(energyCost);
      } 
      else if(type.includes('–°–∏–Ω—è—è')) {
        showChanceUpgradeModal('blue', 5000);
      }
      else if(type.includes('–û—Ä–∞–Ω–∂–µ–≤–∞—è')) {
        showChanceUpgradeModal('orange', 50000);
      }
      else if(type.includes('–ö—Ä–∞—Å–Ω–∞—è')) {
        showChanceUpgradeModal('red', 500000);
      }
    });
  });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function qualityToName(quality) {
  const names = {
    green: "–ó–µ–ª–µ–Ω–∞—è —Ä—ã–±–∞",
    blue: "–°–∏–Ω—è—è —Ä—ã–±–∞",
    orange: "–û—Ä–∞–Ω–∂–µ–≤–∞—è —Ä—ã–±–∞",
    red: "–ö—Ä–∞—Å–Ω–∞—è —Ä—ã–±–∞"
  };
  return names[quality];
}

function getBaseChance(quality) {
  const base = {
    green: 60,
    blue: 25,
    orange: 10,
    red: 5
  };
  return base[quality];
}

// –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
function showEnergyUpgradeModal(cost) {
  const missingCoins = coins < cost ? cost - coins : 0;
  const modalContent = coins >= cost 
    ? `
      <p>–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é –Ω–∞ 5 –µ–¥–∏–Ω–∏—Ü –∑–∞ ${cost} –º–æ–Ω–µ—Ç?</p>
      <div class="modal-buttons">
        <button class="confirm-btn">–ö—É–ø–∏—Ç—å</button>
        <button class="close-modal-btn">–ó–∞–∫—Ä—ã—Ç—å</button>
      </div>
    `
    : `
      <p class="error-message">–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è</p>
      <p class="error-message">–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –µ—â–µ ${missingCoins} –º–æ–Ω–µ—Ç</p>
      <div class="modal-buttons">
        <button class="close-modal-btn">–ó–∞–∫—Ä—ã—Ç—å</button>
      </div>
    `;

  const modal = createModal(modalContent);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"
  const confirmBtn = modal.querySelector('.confirm-btn');
  if (confirmBtn) {
    confirmBtn.addEventListener('click', () => {
      if (coins >= cost) {
        coins -= cost;
        maxEnergy += 5;
        currentEnergy = maxEnergy;
        energyUpgrades++;
        updateEnergy();
        coinsDisplay.textContent = coins;
        renderShop();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
        modal.querySelector('.modal-content').innerHTML = `
          <p>–í—ã —É–≤–µ–ª–∏—á–∏–ª–∏ —ç–Ω–µ—Ä–≥–∏—é –Ω–∞ 5 –µ–¥–∏–Ω–∏—Ü, –ø–æ—Ç—Ä–∞—Ç–∏–≤ ${cost} –º–æ–Ω–µ—Ç</p>
          <div class="modal-buttons">
            <button class="close-modal-btn">–ó–∞–∫—Ä—ã—Ç—å</button>
          </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å"
        modal.querySelector('.close-modal-btn').addEventListener('click', () => {
          modal.remove();
        });
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å"
  modal.querySelector('.close-modal-btn').addEventListener('click', () => {
    modal.remove();
  });
}

function showChanceUpgradeModal(quality, cost) {
  const missingCoins = coins < cost ? cost - coins : 0;
  const modalContent = coins >= cost 
    ? `
      <p>–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —à–∞–Ω—Å –ø–æ–∏–º–∫–∏ ${qualityToName(quality)} –Ω–∞ 1% –∑–∞ ${cost} –º–æ–Ω–µ—Ç?</p>
      <div class="modal-buttons">
        <button class="confirm-btn">–ö—É–ø–∏—Ç—å</button>
        <button class="close-modal-btn">–ó–∞–∫—Ä—ã—Ç—å</button>
      </div>
    `
    : `
      <p class="error-message">–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è</p>
      <p class="error-message">–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –µ—â–µ ${missingCoins} –º–æ–Ω–µ—Ç</p>
      <div class="modal-buttons">
        <button class="close-modal-btn">–ó–∞–∫—Ä—ã—Ç—å</button>
      </div>
    `;

  const modal = createModal(modalContent);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"
  const confirmBtn = modal.querySelector('.confirm-btn');
  if (confirmBtn) {
    confirmBtn.addEventListener('click', () => {
      if (coins >= cost) {
        coins -= cost;
        chanceUpgrades[quality]++;
        coinsDisplay.textContent = coins;
        renderShop();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
        modal.querySelector('.modal-content').innerHTML = `
          <p>–í—ã —É–≤–µ–ª–∏—á–∏–ª–∏ —à–∞–Ω—Å –ø–æ–∏–º–∫–∏ ${qualityToName(quality)} –Ω–∞ 1%, –ø–æ—Ç—Ä–∞—Ç–∏–≤ ${cost} –º–æ–Ω–µ—Ç</p>
          <div class="modal-buttons">
            <button class="close-modal-btn">–ó–∞–∫—Ä—ã—Ç—å</button>
          </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å"
        modal.querySelector('.close-modal-btn').addEventListener('click', () => {
          modal.remove();
        });
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å"
  modal.querySelector('.close-modal-btn').addEventListener('click', () => {
    modal.remove();
  });
}

function createModal(content) {
  const modal = document.createElement('div');
  modal.className = 'modal';
  modal.innerHTML = `
    <div class="modal-content">
      ${content}
    </div>
  `;
  document.body.appendChild(modal);
  return modal;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
initStats();
renderStats();
updateEnergy();
coinsDisplay.textContent = coins; // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
setInterval(() => {
	if(currentEnergy < maxEnergy) {
	  currentEnergy++;
	  updateEnergy();
	}
  }, 60000); // 60 000 –º—Å = 1 –º–∏–Ω—É—Ç–∞